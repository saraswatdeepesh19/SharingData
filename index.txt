import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import java.io.IOException;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.logging.Logger;

public class ImageWebSocketHandler extends TextWebSocketHandler {

    private static final String IMAGE_FOLDER = "/path/to/image/folder";
    private static final Logger LOGGER = Logger.getLogger(ImageWebSocketHandler.class.getName());
    private final List<String> imageFiles = new ArrayList<>();
    private static final int MAX_RETRIES = 5;
    private static final int RETRY_DELAY_MS = 200; // 200 milliseconds

    public ImageWebSocketHandler() {
        loadInitialImages();
    }

    private void loadInitialImages() {
        try {
            Files.list(Paths.get(IMAGE_FOLDER))
                .filter(Files::isRegularFile)
                .map(Path::toString)
                .sorted()  // Ensures files are sorted in natural order (if required)
                .forEach(imageFiles::add);
        } catch (IOException e) {
            LOGGER.severe("Error loading initial images: " + e.getMessage());
        }
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        super.afterConnectionEstablished(session);
        sendInitialImages(session);
        watchFolder(session);
    }

    private void sendInitialImages(WebSocketSession session) {
        for (String imageFile : imageFiles) {
            sendImageWithRetry(session, imageFile);
        }
    }

    private void watchFolder(WebSocketSession session) {
        try {
            WatchService watchService = FileSystems.getDefault().newWatchService();
            Paths.get(IMAGE_FOLDER).register(watchService, StandardWatchEventKinds.ENTRY_CREATE);

            new Thread(() -> {
                while (true) {
                    WatchKey key;
                    try {
                        key = watchService.take();
                    } catch (InterruptedException e) {
                        return;
                    }

                    for (WatchEvent<?> event : key.pollEvents()) {
                        WatchEvent.Kind<?> kind = event.kind();

                        if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
                            Path filePath = ((WatchEvent<Path>) event).context();
                            String fullPath = IMAGE_FOLDER + "/" + filePath.toString();
                            imageFiles.add(fullPath);
                            sendImageWithRetry(session, fullPath);
                        }
                    }
                    key.reset();
                }
            }).start();
        } catch (IOException e) {
            LOGGER.severe("Error watching folder: " + e.getMessage());
        }
    }

    private void sendImageWithRetry(WebSocketSession session, String filePath) {
        int retries = 0;
        while (retries < MAX_RETRIES) {
            try {
                byte[] imageBytes = Files.readAllBytes(Paths.get(filePath));
                String base64Image = Base64.getEncoder().encodeToString(imageBytes);
                session.sendMessage(new TextMessage(base64Image));
                break;
            } catch (IOException e) {
                retries++;
                LOGGER.warning("Error reading file, retrying (" + retries + "/" + MAX_RETRIES + "): " + e.getMessage());
                try {
                    Thread.sleep(RETRY_DELAY_MS);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    LOGGER.severe("Thread interrupted: " + ie.getMessage());
                }
            }
        }
    }
}
